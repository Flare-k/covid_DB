1pg)
- 하나의 program 또는 하나의 process가 수행되는 과정
- cpu의 명령어가 수행이 되다가
	-> I/O event가 발생되기를 기다리다가 
	-> cpu의 명령어가 수행이 되다가
	-> I/O event가 발생되기를 기다리다가
	-> 반복,,

4pg)
- CPU burst, IO burst 이걸 왜 하냐면
	-> 스케쥴링 할 때
	-> cpu bound process는 어떻게 scheduling하고
	-> io bound process는 어떻게 scheduling하는지 구분하기 위해
	-> cpu bound와 io bound의 scheduling 정책이 다름
	
- 지금 현재 a,b,c,d라는 4개의 process가 있어 (예시)
	- a,b는 cpu bound process이고,
	- c,d는 io bound process임
	-> if) a,b,c,d 모두 ready 상태야.
	   이 중 하나를 고르는 것이 scheduling임
	-> io bound process를 scheduling하는 게 일반적
	why? - io bound process인 program은
	대부분 user와 interactive하게 동작하기 때문에
	사용자가 이 프로그램이 빨리 실행되기를 기다리고  있음
	반면, cpu bound process인 program은 실행해봤자
	사용자가 지금 바로 보는 게 아님. 천천히 실행해도 큰 문제 없음.

- io bound process는 사용자와 대화형으로 동작하고 있기 때문에,
사용자가 명령을 내린 것이 어떻게 동작하고 있는지, 빨리 끝나는지를
사용자가 기다리고 있기 때문에, io bound process인 program한테
scheduling 우선순위를 주는 게 맞음

- cpu scheduling이 뭔지
- cpu schedling을 수행하는 주체 -> scheduler
- cpu scheduling이 언제 일어나는지 :process의 상태가 바뀔 때마다

5pg)
- dispatch를 수행하는 주체 : dispatcher
- dispatch : scheduler가 수행시킬 process를 하나 골랐어
		-> 걔를 memory에 올려서 수행을 시켜야겠지
		-> 그 작업을 dispatch라고 함
- cpu가 어떤 process를 수행시킬지 골랐지
	-> 고르는 작업이 scheduling이고
	-> 그 process를 memory에 올려서 수행시키는 작업이 dispatch임
- 넓은 의미에서는 scheduling과 dispatch을 합쳐서 scheduling이라고도  함

6pg)
- 어떤 process가 수행중이야
	-> 그 process가 지금 io를 요청해서 waiting 상태야
	-> 그럼 다른 process가 수행이 되겠지
	-> 이 상황은 preemptive와 non-preemptive가 동일한데
	  
- processA가 수행중이고 지금 A는 계속 실행될 수 있는 상황임
	-> 갑자기 A보다 더 중요한 processB가 ready상태가 됨
	-> 그럼 A를 수행시키는 것이 맞을까? B를 수행시키는 것이 맞을까?
		1) 왜 지금 A를 중단시키냐!! 지금 A가 일하고 있잖아!!
		내가 수행될 수 있으면, 나보다 중요하고 우선순위가 높은 process가 ready상태에 있더라고 내가 계속 수행됨
		: non-preemptive scheduling
		2) 더 중요한(=우선순위가 높은) B를 수행시키고 A는 ready상태로 만드는 것이
		: preemptive scheduling임
		(preemptive : 선점하다, 즉, A를 제치고 B가 선점함)

- 앞서 말했듯이 non-preemptive scheduling이라고 해도,
수행되고 있던 process(즉, running이었던 process)가 waiting이 되면
우선순위가 높았지만 ready라서 기다리고 있었던 process가
이제 수행(running)될 수 있음!!
즉, waiting 되면 짤탱이 없이 비켜야 함 (당연한 얘기)

- 하지만, 현재 모든 운영체제는 preemptive scheduling을 지원함
// 18분 20초 겁나 웃겨ㅠㅠ

7pg)
- ready상태에 있는 process 중 scheduling을 할 때,
어떤 기준을 가지고 골라야 할지! 