* Operating System Structure
- 프로그램을 작성할 때 함수를 작성하는 것(=>function call)
- 프로그램을 작성할 때 라이브러리를 사용하는 것(=> library function call)
// 15분,,, 무슨함수? 발음,,,ㅎ -> fork함수였음

* System call
- windows에서 짠 프로그램을 UNIX에서 돌릴 수 없다 -> windows와 UNIX의 system call이 다르기 때문

* Taking "control" of the system
- app이 이상한 짓 하는 것도 막아야하고
- 안정적으로 작동하도록 system을 장악
- 운영체제가 언제 수행되는지를 표헌하는 그림 

- os가 부팅 다 하고 나면 app프로그램이 수행됨
- 부팅해놓고 10분 후에 가보면 수행시킬 app이 없음
- cpu는 아무것도 안 하는 건 아님
- idle process를 실행중인 거임(무한루프 도는 중)

- 앞서 말한 interrupt과정은 OS가 없다고 가정한 경우
- OS가 있는 경우 interrupt의 과정은
	- OS가 수행시켜야 할 process는 여러개
	- process가 자기가 하던 일을 멈추고 저장
	- interrupt handler가 처리를 한 다음
	- os가 동작
	- scheduling : 누구를 실행시킬까 결정

- 즉, OS가 있는 경우 interrupt 전에 A를 수행했다고 해서 interrupt 처리 후 반드시 A를 처리하는 것이 아니라 scheduling에 의해서 B를 수행할 수도 있는 것임
- timer interrupt : 10ms마다 한 번씩 OS가 수행됨 
- trap : exception 중 하나로 app가 OS한테 서비스를 요청하는 것

*Bootstrapping
- ROM BIOS가 실행되면 -> POST(Power On Self Test, Power On됐을 때 IO장치들이 잘 동작하는지) -> OS를 memory에 올려라(by Loader)  -> OS 수행

* soft engineering
